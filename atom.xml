<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>难得一闲的小站</title>
  
  <subtitle>All at sea</subtitle>
  <link href="https://ajax404.tk/atom.xml" rel="self"/>
  
  <link href="https://ajax404.tk/"/>
  <updated>2022-03-18T12:31:29.756Z</updated>
  <id>https://ajax404.tk/</id>
  
  <author>
    <name>soxio</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RSA加密</title>
    <link href="https://ajax404.tk/2022/03/18/RSA%E5%8A%A0%E5%AF%86/"/>
    <id>https://ajax404.tk/2022/03/18/RSA%E5%8A%A0%E5%AF%86/</id>
    <published>2022-03-18T06:41:59.632Z</published>
    <updated>2022-03-18T12:31:29.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RSA-加密算法"><a href="#RSA-加密算法" class="headerlink" title="RSA 加密算法"></a>RSA 加密算法</h2><ol><li><code>RSA</code> 加密算法：一种非对称加密算法。</li><li><code>RSA</code> 公开密钥密码体制 是一种使用不同的加密密钥与解密密钥，“由已知加密密钥推导出解密密钥在计算上是不可行的”密码体制。</li><li>在公开密钥密码体制中，加密密钥（即公开密钥）<code>PK</code> 是公开信息，而解密密钥（即秘密密钥）<code>SK</code> 是需要保密的。加密算法E和解密算法D也都是公开的。虽然解密密钥 <code>SK</code> 是由公开密钥 <code>PK</code> 决定的，但却不能根据 <code>PK</code> 计算出 <code>SK</code>。</li></ol><h2 id="生成-RSA-密钥对"><a href="#生成-RSA-密钥对" class="headerlink" title="生成 RSA 密钥对"></a><a href="https://github.com/travist/jsencrypt">生成 RSA 密钥对</a></h2><h3 id="生成私钥"><a href="#生成私钥" class="headerlink" title="生成私钥"></a>生成私钥</h3><pre class="language-bash" data-language="bash"><code class="language-bash">openssl genrsa -out rsa_1024_priv.pem <span class="token number">1024</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/soxio/imglib@master/hexo/%E7%94%9F%E6%88%90RSA%E7%A7%81%E9%92%A5.png" loading="lazy"></p><h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><p>根据 <code>Private Key</code> 生成 <code>Public Key</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">openssl rsa -pubout -in rsa_1024_priv.pem -out rsa_1024_pub.pem</code></pre><p><img src="https://cdn.jsdelivr.net/gh/soxio/imglib@master/hexo/%E7%94%9F%E6%88%90RSA%E5%85%AC%E9%92%A5.png" loading="lazy"></p><h2 id="前端使用-jsencrypt-加密"><a href="#前端使用-jsencrypt-加密" class="headerlink" title="前端使用 jsencrypt 加密"></a>前端使用 <a href="https://github.com/travist/jsencrypt">jsencrypt</a> 加密</h2><p>使用 <code>Public Key</code> 加密</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="language-none"><code class="language-none">yarn add jsencrypt</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 如果你使用的不是原生 HTML+JavaScript</span><span class="token keyword">import</span> JSEncrypt <span class="token keyword">from</span> <span class="token string">'jsencrypt'</span><span class="token punctuation">;</span><span class="token keyword">const</span> encrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 你的 Pubic Key</span><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    -----BEGIN PUBLIC KEY-----    MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD3EO65hE1Q5im0z4xIl0ViPEnU    GmvUTM63/2Um8HlpYJlyym/xH+7RhvjiuzDxxFcdAeZrqe6hOQRswS4NK46vgX26    EiNSndrtrmFOH5TDRfbUtEpvAb0NCDIHDvmvcfZd0m/gtZ37Zk0WMIExki5RO2XD    i+nQmn6oUnzjyXigYQIDAQAB    -----END PUBLIC KEY-----</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>encrypt<span class="token punctuation">.</span><span class="token function">setPublicKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> pwd <span class="token operator">=</span> encrypt<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>loginForm<span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="后端使用-node-rsa-解密"><a href="#后端使用-node-rsa-解密" class="headerlink" title="后端使用 node-rsa 解密"></a>后端使用 <a href="https://www.npmjs.com/package/node-rsa">node-rsa</a> 解密</h2><p>使用 <code>Private Key</code> 解密</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> node-rsa</code></pre><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> NodeRSA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-rsa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加载你的 Private Key</span><span class="token keyword">const</span> privateKey <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'../rsa/rsa_1024_priv.pem'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> nodersa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeRSA</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 因为 jsencrypt 自身使用的是 pkcs1 加密方案, nodejs 需要修改成 pkcs1</span>nodersa<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>encryptionScheme<span class="token operator">:</span> <span class="token string">'pkcs1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解密</span>pwd <span class="token operator">=</span> nodersa<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>pwd<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="关于-NodeJS-服务端导入-JavaSript-CSS"><a href="#关于-NodeJS-服务端导入-JavaSript-CSS" class="headerlink" title="关于 NodeJS 服务端导入 JavaSript|CSS"></a>关于 NodeJS 服务端导入 JavaSript|CSS</h3><p>首先，加载静态资源文件用的都是 <code>GET</code> 请求。因此我下面这段代码在 <code>GET</code> 请求中进行判断返回。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 加载静态文件</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(js|css)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../public/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> encoding<span class="token operator">:</span> <span class="token string">'utf-8'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="关于-NodeJS-获取-POST-请求数据"><a href="#关于-NodeJS-获取-POST-请求数据" class="headerlink" title="关于 NodeJS 获取 POST 请求数据"></a>关于 NodeJS 获取 POST 请求数据</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 接收 POST 的数据</span><span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    postData <span class="token operator">+=</span> chunk<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接收完成之后</span>req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ... 在这里开始你的表演</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RSA-加密算法&quot;&gt;&lt;a href=&quot;#RSA-加密算法&quot; class=&quot;headerlink&quot; title=&quot;RSA 加密算法&quot;&gt;&lt;/a&gt;RSA 加密算法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;RSA&lt;/code&gt; 加密算法：一种非对称加密算法。&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="加密" scheme="https://ajax404.tk/categories/%E5%8A%A0%E5%AF%86/"/>
    
    
    <category term="Node" scheme="https://ajax404.tk/tags/Node/"/>
    
    <category term="加密" scheme="https://ajax404.tk/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>vue常用语法总结</title>
    <link href="https://ajax404.tk/2022/02/13/vue%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://ajax404.tk/2022/02/13/vue%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2022-02-13T14:23:18.993Z</published>
    <updated>2022-02-13T14:22:42.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><pre class="language-vue" data-language="vue"><code class="language-vue">export default &#123;  data() &#123;    return &#123;      screenHeight: null    &#125;  &#125;,  watch: &#123;    &#x2F;&#x2F; 方式一 适用与简单数据类型    &#x2F;&#x2F; screenHeight(newVal) &#123;    &#x2F;&#x2F;   console.log(newVal);    &#x2F;&#x2F; &#125;,    &#x2F;&#x2F; 方式二 适用与简单和复杂数据类型    screenHeight: &#123;      handler(val) &#123;        console.log(val);      &#125;,      deep: true, &#x2F;&#x2F; 深度监听，复杂数据类型需要开启      immediate: true &#x2F;&#x2F; 初始化监听    &#125;  &#125;,  mounted() &#123;    &#x2F;&#x2F; 监听屏幕分辨率事件    window.addEventListener(&#39;resize&#39;, () &#x3D;&gt; &#123;      this.screenHeight &#x3D; screen.height    &#125;)  &#125;,&#125;</code></pre><h2 id="动态绑定class"><a href="#动态绑定class" class="headerlink" title="动态绑定class"></a>动态绑定class</h2><h3 id="方式1-对象形式"><a href="#方式1-对象形式" class="headerlink" title="方式1 对象形式"></a>方式1 对象形式</h3><pre class="language-vue" data-language="vue"><code class="language-vue">:class&#x3D;&quot;&#123;&#39;red&#39;: current &#x3D;&#x3D;&#x3D; index&#125;&quot;</code></pre><h3 id="方式2-三元表达式"><a href="#方式2-三元表达式" class="headerlink" title="方式2 三元表达式"></a>方式2 三元表达式</h3><pre class="language-none"><code class="language-none">:class&#x3D;&quot;current &#x3D;&#x3D;&#x3D; index ? &#39;red&#39;:&#39;&#39;&quot;</code></pre><h2 id="动态绑定style"><a href="#动态绑定style" class="headerlink" title="动态绑定style"></a>动态绑定style</h2><h3 id="方式1-对象形式-1"><a href="#方式1-对象形式-1" class="headerlink" title="方式1 对象形式"></a>方式1 对象形式</h3><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;div :style&#x3D;&quot;&#123; color: &#39;red&#39; &#125;&quot;&gt;哈哈&lt;&#x2F;div&gt;</code></pre><h3 id="方式2-三元表达式-1"><a href="#方式2-三元表达式-1" class="headerlink" title="方式2 三元表达式"></a>方式2 三元表达式</h3><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;div :style&#x3D;&quot;&#123; color: (current &gt; 0 ? &#39;red&#39; : &#39;green&#39;) &#125;&quot;&gt;哈哈&lt;&#x2F;div&gt;</code></pre><h3 id="方式3-绑定data数据"><a href="#方式3-绑定data数据" class="headerlink" title="方式3 绑定data数据"></a>方式3 绑定data数据</h3><pre class="language-vue" data-language="vue"><code class="language-vue">:style&#x3D;&quot;styleObject&quot;</code></pre><pre class="language-vue" data-language="vue"><code class="language-vue">data() &#123;    return&#123;      styleObject: &#123;        color: &#39;red&#39;,        fontSize: &#39;13px&#39;      &#125;      &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;watch&quot;&gt;&lt;a href=&quot;#watch&quot; class=&quot;headerlink&quot; title=&quot;watch&quot;&gt;&lt;/a&gt;watch&lt;/h2&gt;&lt;pre class=&quot;language-vue&quot; data-language=&quot;vue&quot;&gt;&lt;code class=&quot;la</summary>
      
    
    
    
    <category term="vue" scheme="https://ajax404.tk/categories/vue/"/>
    
    
    <category term="vue" scheme="https://ajax404.tk/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结</title>
    <link href="https://ajax404.tk/2021/12/31/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://ajax404.tk/2021/12/31/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-31T12:01:10.576Z</published>
    <updated>2022-04-10T05:59:25.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2021年终总结"><a href="#2021年终总结" class="headerlink" title="2021年终总结"></a>2021年终总结</h2><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>岁月如梭，光阴似箭！祝大家元旦快乐！2021对我而言注定是不平凡的，也收获了各方面的第一次，第一次下定决心、第一次真正为一件事情努力、当然也结识很多有趣的朋友。这一年里充满了挑战，也收获了很多宝贵的东西。从事前端已经一个月了，收获了很多，也知道了自己的不足和未来努力的方向。</p><h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p>希望在新的一年里在技术方面继续前进，业务方面也得努力加油，至于是学vue3还是react目前还在考虑中。</p><h4 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h4><p>在工作中遇到许多需要英语的场景，而自己却只能开着翻译一个个去对照看，实在是很蛋疼，所以打算在新的一年里提升自己的英语水平。</p><h4 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h4><p>干开发这一行始终是绕不开数据结构和算法，而这也是我自己的弱项，所以在业余时间里也得补上来。</p><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><p>好久都没写文章了，工作中遇到的问题和解决问题的思路，都没能以文章的形式沉淀下去，感觉这样下去是不行的，新的一年中得多多写写文章。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>2021年里有收获有挑战有遗憾，是相当充实的一年，也祝自己和大家在新的一年能在自己的方向继续前进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2021年终总结&quot;&gt;&lt;a href=&quot;#2021年终总结&quot; class=&quot;headerlink&quot; title=&quot;2021年终总结&quot;&gt;&lt;/a&gt;2021年终总结&lt;/h2&gt;&lt;h3 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="个人" scheme="https://ajax404.tk/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
    <category term="总结" scheme="https://ajax404.tk/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>vue3-composition_API 基本使用</title>
    <link href="https://ajax404.tk/2021/10/04/vue3-composition_API/"/>
    <id>https://ajax404.tk/2021/10/04/vue3-composition_API/</id>
    <published>2021-10-04T15:16:57.118Z</published>
    <updated>2021-10-04T15:26:37.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h2><blockquote><p>龙应该藏在云里</p></blockquote><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><ul><li>setup 在 beforeCreate钩子之前执行</li><li>setup 中无法使用this</li><li>变量和函数需要在setup中返回</li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>props 用于使用来自父组件传递的参数</li><li>context 包含三个属性<ul><li>attrs : 所有非prop的attribute</li><li>slots : 父组件传递过来的插槽</li><li>emit : 组件需要发出事件时使用</li></ul></li></ul><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>可存放data和method</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><strong>vue2</strong></li><li>beforeCreate<ul><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>beforeDestroy</li><li>destroyed</li></ul></li><li><strong>vue3</strong><ul><li><code>setup</code> 创建实例前</li><li><code>onBeforeMount</code> 挂载DOM前</li><li><code>onMounted</code> 挂载DOM后</li><li><code>onBeforeUpdate</code> 更新组件前</li><li><code>onUpdated</code> 更新组件后</li><li><code>onBeforeUnmount</code> 卸载销毁前</li><li><code>onUnmounted</code> 卸载销毁后</li></ul></li></ul><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><h4 id="reactive（复杂数据类型）"><a href="#reactive（复杂数据类型）" class="headerlink" title="reactive（复杂数据类型）"></a>reactive（复杂数据类型）</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// reactive 定义数据 必须传入对象或数组</span>    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      counter<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 定义事件函数，需要在setup中return</span>    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>counter<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">,</span>      add    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="ref（简单-复杂数据类型）"><a href="#ref（简单-复杂数据类型）" class="headerlink" title="ref（简单/复杂数据类型）"></a>ref（简单/复杂数据类型）</h4><blockquote><p>定义数据修改需要.value，模板则不需要</p></blockquote><p><strong>简单数据类型</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 自动解构 无需写 counter<span class="token punctuation">.</span>value <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>counter<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ref 定义数据 推荐使用</span>    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">// 定义事件函数，需要在setup中return</span>    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// setup中无法自动解构</span>      counter<span class="token punctuation">.</span>value<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      counter<span class="token punctuation">,</span>      add    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>复杂数据类型</strong></p><pre class="language-none"><code class="language-none">&lt;template&gt;  &lt;h3&gt;&#123;&#123;obj.name&#125;&#125;&lt;&#x2F;h3&gt;  &lt;h3&gt;&#123;&#123;obj.age&#125;&#125;&lt;&#x2F;h3&gt;  &lt;div&gt;&lt;button @click&#x3D;&quot;change&quot;&gt;修改名称&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; reactive, ref, toRefs &#125; from &#39;vue&#39;export default &#123;  setup() &#123;    const obj &#x3D; ref(&#123;      name: &#39;张三&#39;,      age: 18    &#125;)    const change &#x3D; () &#x3D;&gt; &#123;      obj.value.name &#x3D; &#39;李四&#39;    &#125;    return &#123;      obj,      change,          &#125;  &#125;&#125;&lt;&#x2F;script&gt;</code></pre><h4 id="toRef（解构单个对象属性）"><a href="#toRef（解构单个对象属性）" class="headerlink" title="toRef（解构单个对象属性）"></a>toRef（解构单个对象属性）</h4><blockquote><p>用于解构出对象的属性，属性仍然和对象有关联</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>修改名称<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> toRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">18</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 解构出name属性 这时的name仍然是关联obj的</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 解构出的name需要用.value修改</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'李四'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">,</span>      change<span class="token punctuation">,</span>      name    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="toRefs（解构全部对象属性）"><a href="#toRefs（解构全部对象属性）" class="headerlink" title="toRefs（解构全部对象属性）"></a>toRefs（解构全部对象属性）</h4><blockquote><p>将响应式对象转换为普通对象，其中结果对象的每个 property 都是指向原始对象相应 property 的 <strong>ref</strong></p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>修改名称<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">18</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 解构出的name需要用.value修改</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'李四'</span>      age<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">20</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      name<span class="token punctuation">,</span>       age<span class="token punctuation">,</span>      change<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p><strong>传入函数</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span>今年<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>岁<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span>明年<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>newAge<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>岁<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>修改年龄<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> newAge <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> age<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      age<span class="token punctuation">.</span>value<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      age<span class="token punctuation">,</span>      newAge<span class="token punctuation">,</span>      change<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>传入对象</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span>今年<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>岁<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span>明年<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>newAge<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>岁<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"newAge"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> newAge <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        age<span class="token punctuation">.</span>value <span class="token operator">=</span> val <span class="token operator">-</span> <span class="token number">1</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      age<span class="token punctuation">,</span>      newAge         <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateName"</span><span class="token operator">></span>修改名字<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">18</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">updateName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span>    <span class="token punctuation">&#125;</span>    <span class="token function">watch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//深度监听 监听对象里的对象需要开启</span>      immediate<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 初始化完成监听一次</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">,</span>      updateName    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><blockquote><p>获取元素真实dom</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>我是box<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> box <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>     <span class="token keyword">return</span>  <span class="token punctuation">&#123;</span>      box    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p><strong>App.vue</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span>父组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>hr<span class="token operator">></span>  <span class="token operator">&lt;</span>son <span class="token operator">:</span>money<span class="token operator">=</span><span class="token string">"money"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">'@/components/son.vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    son  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      money    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>son.vue</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>money<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'money'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p><strong>son.vue</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>money<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changMoney"</span><span class="token operator">></span>花费<span class="token number">50</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'money'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'changMoney'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 声明发出的事件</span>  <span class="token comment">// 解构emit</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">changMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'changMoney'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      changMoney    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>App.vue</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span>父组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>hr<span class="token operator">></span>  <span class="token operator">&lt;</span>son <span class="token operator">:</span>money<span class="token operator">=</span><span class="token string">"money"</span> @changMoney<span class="token operator">=</span><span class="token string">"changMoney"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">'@/components/son.vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    son  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">changMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newMoney</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      money<span class="token punctuation">.</span>value <span class="token operator">-=</span> newMoney    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      money<span class="token punctuation">,</span>      changMoney    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><ul><li>provide 向后代组件发送数据或者函数</li><li>inject 接受祖先组件传来的数据或者函数</li></ul><p><strong>App.vue</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span>父组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>hr<span class="token operator">></span>  <span class="token operator">&lt;</span>son<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">'@/components/son.vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> provide<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    son  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">// 使用provide向后代共享数据</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'money'</span><span class="token punctuation">,</span> money<span class="token punctuation">)</span>    <span class="token comment">// 使用provide向后代共享函数</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      money<span class="token punctuation">.</span>value <span class="token operator">-=</span> val    <span class="token punctuation">&#125;</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'changeMoney'</span><span class="token punctuation">,</span> changeMoney<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      money    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>son.vue</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>money<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateMoney"</span><span class="token operator">></span>花费<span class="token number">50</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> inject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用inject进行接收</span>    <span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'money'</span><span class="token punctuation">)</span>    <span class="token comment">// 接收来自祖先组件的函数</span>    <span class="token keyword">const</span> changeMoney <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'changeMoney'</span><span class="token punctuation">)</span>    <span class="token comment">// 调用修改money</span>    <span class="token keyword">const</span> <span class="token function-variable function">updateMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">changeMoney</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      money<span class="token punctuation">,</span>      updateMoney    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="v-model语法糖"><a href="#v-model语法糖" class="headerlink" title="v-model语法糖"></a>v-model语法糖</h3><p><strong>App.vue</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">'@/components/son.vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    son  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      money    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>son.vue</strong></p><blockquote><p>默认属性值为modelValue</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>modelValue<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>花费<span class="token number">50</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'modelValue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>emit<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      change    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><blockquote><p>代码逻辑混入</p></blockquote><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p><strong>mixin/demoMixin.js</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> demoMixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      title<span class="token operator">:</span> <span class="token string">'我是混入'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p><strong>App.vue</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> demoMixin <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mixin/demoMixin'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>demoMixin<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="组件-混入合并冲突"><a href="#组件-混入合并冲突" class="headerlink" title="组件-混入合并冲突"></a>组件-混入合并冲突</h4><ul><li>数据以组件为准</li><li>生命周期都会调用</li><li>函数以组件为准</li></ul><h4 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h4><p><strong>mixin/demoMixin.js</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> demoMixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      title<span class="token operator">:</span> <span class="token string">'我是全局混入'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p><strong>main.js</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> demoMixin <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/mixin/demoMixin'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>demoMixin<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组合式API&quot;&gt;&lt;a href=&quot;#组合式API&quot; class=&quot;headerlink&quot; title=&quot;组合式API&quot;&gt;&lt;/a&gt;组合式API&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;龙应该藏在云里&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;setup&quot;&gt;</summary>
      
    
    
    
    <category term="vue3" scheme="https://ajax404.tk/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://ajax404.tk/tags/vue3/"/>
    
    <category term="composition" scheme="https://ajax404.tk/tags/composition/"/>
    
    <category term="API" scheme="https://ajax404.tk/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>vuex基本使用</title>
    <link href="https://ajax404.tk/2021/10/01/vuex/"/>
    <id>https://ajax404.tk/2021/10/01/vuex/</id>
    <published>2021-10-01T04:58:36.523Z</published>
    <updated>2021-10-01T05:09:02.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>月遇丛云，花遇和风 …</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>npm install vuex</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><ul><li><p>在src目录下新建store文件夹，store文件夹新建index.js</p><pre class="language-none"><code class="language-none">import Vue from &quot;vue&quot;import Vuex from &quot;vuex&quot;&#x2F;&#x2F; 1. 安装插件Vue.use(Vuex)&#x2F;&#x2F; 2. 创建对象const store &#x3D; new Vuex.Store(&#123;  state: &#123;    counter: 1000  &#125;&#125;)&#x2F;&#x2F; 3. 导出store对象export default store</code></pre></li></ul><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><ul><li>导入store对象并挂载</li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 1. 导入store对象import store from &#39;.&#x2F;store&#x2F;index&#39;new Vue(&#123;  &#x2F;&#x2F; 2. 挂载store对象  store,  router,  render: h &#x3D;&gt; h(App),&#125;).$mount(&#39;#app&#39;)</code></pre><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><h3 id="state（数据）"><a href="#state（数据）" class="headerlink" title="state（数据）"></a>state（数据）</h3><h4 id="直接使用state数据"><a href="#直接使用state数据" class="headerlink" title="直接使用state数据"></a>直接使用state数据</h4><blockquote><p>推荐使用Vue.set和Vue.delete对数组和对象进行操作，这样操作得到的数据是响应式的</p></blockquote><pre class="language-none"><code class="language-none">&lt;h1&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;&#x2F;h1&gt;</code></pre><h3 id="mutation（方法）"><a href="#mutation（方法）" class="headerlink" title="mutation（方法）"></a>mutation（方法）</h3><h4 id="修改state数据"><a href="#修改state数据" class="headerlink" title="修改state数据"></a>修改state数据</h4><blockquote><p>推荐只进行同步操作，进行异步操作的数据无法被devtools跟踪到</p></blockquote><ul><li>在 index.js 里通过mutations增加操作state的方法</li></ul><pre class="language-none"><code class="language-none">const store &#x3D; new Vuex.Store(&#123;  state: &#123;    counter: 1000  &#125;,  &#x2F;&#x2F; 通过mutations属性 定义方法来操控state的数据，这样做的好处是可以记录每一次的操作  mutations: &#123;    add(state) &#123;      state.counter++    &#125;,    sub(state) &#123;      state.counter--    &#125;  &#125;,  actions: &#123;  &#125;,  getters: &#123;  &#125;,  modules: &#123;  &#125;&#125;)</code></pre><ul><li>在组件里增加事件方法，通过commit 来调用 mutations 里的方法</li></ul><pre class="language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;&#x2F;h1&gt;    &lt;button @click&#x3D;&quot;addition&quot;&gt;+&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;subtraction&quot;&gt;-&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  methods: &#123;    addition() &#123;      this.$store.commit(&#39;add&#39;)    &#125;,    subtraction() &#123;      this.$store.commit(&#39;sub&#39;)    &#125;  &#125;,&#125;&lt;&#x2F;script&gt;&lt;style&gt;&lt;&#x2F;style&gt;</code></pre><h3 id="getters（计算属性）"><a href="#getters（计算属性）" class="headerlink" title="getters（计算属性）"></a>getters（计算属性）</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><blockquote><p>一般 getters 都是放在根模块最外层, 方便获取所有子模块的state, 从而统一简化数据的渲染</p></blockquote><ul><li>定义</li></ul><pre class="language-none"><code class="language-none">const store &#x3D; new Vuex.Store(&#123;  ...  getters: &#123;&#x2F;&#x2F; 返回counter的平方powerCounter(state) &#123;  return state.counter * state.counter&#125;  ...  &#125;&#125;)</code></pre><ul><li>使用</li></ul><pre class="language-none"><code class="language-none">&lt;h1&gt;&#123;&#123;$store.getters.powerCounter&#125;&#125;&lt;&#x2F;h1&gt;</code></pre><h4 id="带参使用"><a href="#带参使用" class="headerlink" title="带参使用"></a>带参使用</h4><ul><li>定义 返回自定义年龄段的学生数组</li></ul><pre class="language-none"><code class="language-none">const store &#x3D; new Vuex.Store(&#123;  ...  getters: &#123;  &#x2F;&#x2F; 接受用户自定义 返回的是一个函数    anyAge(state) &#123;      return (age) &#x3D;&gt; &#123;        return state.list.filter(item &#x3D;&gt; item.age &gt; age)      &#125;    &#125;  ...  &#125;&#125;)</code></pre><ul><li>使用</li></ul><pre class="language-none"><code class="language-none">&lt;h1&gt;&#123;&#123;$store.getters.anyAge(20)&#125;&#125;&lt;&#x2F;h1&gt;</code></pre><h3 id="actions（异步操作）"><a href="#actions（异步操作）" class="headerlink" title="actions（异步操作）"></a>actions（异步操作）</h3><blockquote><p>建议所有的异步操作都放在actions里进行</p></blockquote><ul><li>index.js</li></ul><pre class="language-none"><code class="language-none">...state: &#123;    info: &#123;      name: &#39;张三&#39;,      age: 18,      gender: &#39;男&#39;,      hobby: &#39;干饭&#39;    &#125;  &#125;,...</code></pre><pre class="language-none"><code class="language-none">...mutations: &#123; updateInfo(state) &#123;      Vue.set(state.info, &#39;adress&#39;, &#39;广东&#39;)    &#125;, &#125;...</code></pre><pre class="language-none"><code class="language-none">actions: &#123;   &#x2F;&#x2F; 1. 解决异步操作无法被 vue-devtools追踪的问题   asyncUpdate(context, payload) &#123;     &#x2F;&#x2F; 无参     &#x2F;&#x2F; setTimeout(() &#x3D;&gt; &#123;     &#x2F;&#x2F;   context.commit(&#39;updateInfo&#39;)     &#x2F;&#x2F; &#125;, 1000)     &#x2F;&#x2F; 有参     return new Promise((resolve, reject) &#x3D;&gt; &#123;       setTimeout(() &#x3D;&gt; &#123;         context.commit(&#39;updateInfo&#39;)       &#125;, 1000)       console.log(payload);       resolve(&#39;我是结果&#39;)     &#125;)   &#125; &#125;,</code></pre><ul><li>app.vue</li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 异步修改   asyncUpdate() &#123;     &#x2F;&#x2F; 1. 无参     &#x2F;&#x2F; this.$store.dispatch(&#39;asyncUpdate&#39;)     &#x2F;&#x2F; 2. 有参     this.$store.dispatch(&#39;asyncUpdate&#39;, &#39;我是参数&#39;).then(res &#x3D;&gt; &#123;       console.log(res);     &#125;)   &#125;</code></pre><h3 id="modules（模块）"><a href="#modules（模块）" class="headerlink" title="modules（模块）"></a>modules（模块）</h3><ul><li><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p></li></ul><pre class="language-none"><code class="language-none">const moduleA &#x3D; &#123;  state: () &#x3D;&gt; (&#123; ... &#125;),  mutations: &#123; ... &#125;,  actions: &#123; ... &#125;,  getters: &#123; ... &#125;&#125;const moduleB &#x3D; &#123;  state: () &#x3D;&gt; (&#123; ... &#125;),  mutations: &#123; ... &#125;,  actions: &#123; ... &#125;&#125;const store &#x3D; new Vuex.Store(&#123;  modules: &#123;    a: moduleA,    b: moduleB  &#125;&#125;)store.state.a &#x2F;&#x2F; -&gt; moduleA 的状态store.state.b &#x2F;&#x2F; -&gt; moduleB 的状态</code></pre><h4 id="锁定命名空间（默认状态下-mutations-actions-是全局通用）"><a href="#锁定命名空间（默认状态下-mutations-actions-是全局通用）" class="headerlink" title="锁定命名空间（默认状态下, mutations / actions 是全局通用）"></a>锁定命名空间（默认状态下, mutations / actions 是全局通用）</h4><pre class="language-none"><code class="language-none">modules: &#123;   user: &#123;     namespaced: true,     state: &#123;       name: &#39;张三&#39;     &#125;,     mutations: &#123;       updateModules(state) &#123;         state.name &#x3D; &#39;李四&#39;       &#125;     &#125;   &#125; &#125;</code></pre><h4 id="提交命名空间的三种方式"><a href="#提交命名空间的三种方式" class="headerlink" title="提交命名空间的三种方式"></a>提交命名空间的三种方式</h4><ul><li>方式一</li></ul><pre class="language-none"><code class="language-none">&lt;h1&gt;-----修改模块中被锁定的数据-------&lt;&#x2F;h1&gt;  &#123;&#123;$store.state.user.name&#125;&#125;&lt;button @click&#x3D;&quot;updateModules&quot;&gt;修改&lt;&#x2F;button&gt;</code></pre><pre class="language-none"><code class="language-none">methods: &#123;  updateModules() &#123;     &#x2F;&#x2F; 加上 user&#x2F; 限定名     this.$store.commit(&#39;user&#x2F;updateModules&#39;)   &#125;&#125;</code></pre><ul><li>方式二</li></ul><pre class="language-none"><code class="language-none">&lt;h1&gt;-----修改模块中被锁定的数据-------&lt;&#x2F;h1&gt;  &#123;&#123;$store.state.user.name&#125;&#125;&lt;button @click&#x3D;&quot;updateModules&quot;&gt;修改&lt;&#x2F;button&gt;</code></pre><pre class="language-none"><code class="language-none">import &#123; mapMutations &#125; from &quot;vuex&quot;;...methods: &#123;  &#x2F;&#x2F; 在辅助函数中通过第一个参数限定命名空间  ...mapMutations(&#39;user&#39;, [&#39;updateModules&#39;])&#125;</code></pre><ul><li>方式三</li></ul><pre class="language-none"><code class="language-none">&lt;h1&gt;-----修改模块中被锁定的数据-------&lt;&#x2F;h1&gt;  &#123;&#123;$store.state.user.name&#125;&#125;&lt;button @click&#x3D;&quot;updateModules&quot;&gt;修改&lt;&#x2F;button&gt;</code></pre><pre class="language-none"><code class="language-none">import &#123; createNamespacedHelpers &#125; from &quot;vuex&quot;;const &#123; mapMutations &#125; &#x3D; createNamespacedHelpers(&quot;user&quot;);...methods: &#123;   ...mapMutations([&#39;updateModules&#39;]) &#125;</code></pre><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><ul><li><p>引用对应的<strong>mapXXX函数</strong></p></li><li><p>在对应位置进行结构</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;月遇丛云，花遇和风 …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;npm install</summary>
      
    
    
    
    <category term="vuex" scheme="https://ajax404.tk/categories/vuex/"/>
    
    
    <category term="vuex" scheme="https://ajax404.tk/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>引入rem布局</title>
    <link href="https://ajax404.tk/2021/09/21/%E5%BC%95%E5%85%A5rem%E5%B8%83%E5%B1%80/"/>
    <id>https://ajax404.tk/2021/09/21/%E5%BC%95%E5%85%A5rem%E5%B8%83%E5%B1%80/</id>
    <published>2021-09-21T01:40:01.180Z</published>
    <updated>2021-09-18T12:29:44.674Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p> npm i <a href="mailto:&#x70;&#111;&#x73;&#x74;&#x63;&#x73;&#x73;&#x2d;&#x70;&#x78;&#116;&#x6f;&#x72;&#x65;&#x6d;&#x40;&#x35;&#46;&#x31;&#46;&#x31;">&#x70;&#111;&#x73;&#x74;&#x63;&#x73;&#x73;&#x2d;&#x70;&#x78;&#116;&#x6f;&#x72;&#x65;&#x6d;&#x40;&#x35;&#46;&#x31;&#46;&#x31;</a> amfe-flexible</p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>main.js</li></ul><pre class="language-none"><code class="language-none">import &#39;amfe-flexible&#x2F;index.js&#39;</code></pre><ul><li>在public/index.html加入meta标签</li></ul><pre class="language-none"><code class="language-none">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1,maximum-scale&#x3D;1, minimum-scale&#x3D;1, user-scalable&#x3D;no&quot;&gt;</code></pre><ul><li> 在package.json项目配置里设置postcss</li></ul><pre class="language-none"><code class="language-none">&quot;postcss&quot;: &#123;   &quot;plugins&quot;: &#123;     &quot;autoprefixer&quot;: &#123;       &quot;overrideBrowserslist&quot;: [         &quot;Android 4.1&quot;,         &quot;iOS 7.1&quot;,         &quot;Chrome &gt; 31&quot;,         &quot;ff &gt; 31&quot;,         &quot;ie &gt;&#x3D; 8&quot;       ]     &#125;,     &quot;postcss-pxtorem&quot;: &#123;       &quot;rootValue&quot;: 37.5,       &quot;propList&quot;: [         &quot;*&quot;       ]     &#125;   &#125; &#125;,</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; npm i &lt;a href=&quot;mailto:&amp;#x70;&amp;#111;&amp;#x73;&amp;#x74;&amp;#x63;&amp;#x7</summary>
      
    
    
    
    <category term="rem" scheme="https://ajax404.tk/categories/rem/"/>
    
    
    <category term="rem" scheme="https://ajax404.tk/tags/rem/"/>
    
    <category term="布局" scheme="https://ajax404.tk/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>vue路由的基本使用</title>
    <link href="https://ajax404.tk/2021/09/07/vue%E8%B7%AF%E7%94%B1/"/>
    <id>https://ajax404.tk/2021/09/07/vue%E8%B7%AF%E7%94%B1/</id>
    <published>2021-09-07T06:23:20.787Z</published>
    <updated>2022-03-06T07:37:06.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>npm install vue-router</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><ul><li>在src目录下新建router文件夹，并新建index.js</li><li>导入对应的包并挂载路由</li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 1. 导入包import Vue from &#39;vue&#39;import VueRouter from &#39;vue-router&#39;&#x2F;&#x2F; 2. 挂载路由Vue.use(VueRouter)</code></pre><ul><li><p>导入需要路由的组件（两种方式）</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 1. 直接导入组件import demo1 from &#39;&#39;&#x2F;&#x2F; 2. 路由懒加载(推荐) 当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。const demo1 &#x3D; ()&#x3D;&gt; import(&#39;..&#x2F;components&#x2F;demo1.vue&#39;)</code></pre></li><li><p>创建 路由——组件 映射关系</p><pre class="language-none"><code class="language-none">const routes &#x3D; [  &#123;    path: &#39;&#x2F;demo1&#39;,    component: demo1  &#125; ]</code></pre></li><li><p>创建路由对象并导出</p><pre class="language-none"><code class="language-none">const router &#x3D; new VueRouter(&#123;  &#x2F;&#x2F; 在路由对象中应用上一步的路由信息  routes,  &#x2F;&#x2F; 更改路由模式  mode: &#39;history&#39;&#125;)&#x2F;&#x2F; 导出路由信息export default router</code></pre></li></ul><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><ul><li><p>导入路由文件 index.js</p><pre class="language-none"><code class="language-none">import router from &#39;.&#x2F;router&#x2F;index&#39;</code></pre></li><li><p>挂载路由</p><pre class="language-none"><code class="language-none">new Vue(&#123;  &#x2F;&#x2F; 添加路由对象  router,  render: h &#x3D;&gt; h(App),&#125;).$mount(&#39;#app&#39;)</code></pre></li></ul><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><ul><li><p>创建路由元素连接</p><pre class="language-none"><code class="language-none">&lt;!-- to&#x3D;&quot;路由路径&quot;tag&#x3D;&quot;元素类型 --&gt;&lt;router-link to&#x3D;&#39;&#x2F;demo1&#39; tag&#x3D;&quot;button&quot;&gt;demo1&lt;&#x2F;router-link&gt;</code></pre></li><li><p>展示路由对应组件页面</p><pre class="language-none"><code class="language-none">&lt;!-- 直接展示 --&gt;&lt;router-view&gt;&lt;&#x2F;router-view&gt;</code></pre></li></ul><h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><h3 id="方式一：页面元素跳转"><a href="#方式一：页面元素跳转" class="headerlink" title="方式一：页面元素跳转"></a>方式一：页面元素跳转</h3><pre class="language-none"><code class="language-none">&lt;router-link to&#x3D;&quot;&#x2F;find&quot;&gt;发现音乐&lt;&#x2F;router-link&gt;</code></pre><h3 id="方式二：js代码跳转"><a href="#方式二：js代码跳转" class="headerlink" title="方式二：js代码跳转"></a>方式二：js代码跳转</h3><ul><li><p>路由无需传值时直接push路径</p><pre class="language-none"><code class="language-none">toMy() &#123;      this.$router.push(&#39;路由路径&#39;) &#125;</code></pre></li><li><p>通过path属性来进行跳转  </p><p>传参：只能通过query进行传参</p><pre class="language-none"><code class="language-none">toMy() &#123;      this.$router.push(&#123;        path: &#39;&#x2F;myMusic&#39;,        query: &#123;          name: &#39;张三&#39;        &#125;      &#125;)&#125;</code></pre></li><li><p>通过name属性来进行跳转</p><p>注意：params传值只能和name属性结合使用</p><pre class="language-none"><code class="language-none">tofriend() &#123;      this.$router.push(&#123;        &#x2F;&#x2F; params 传参需要路由有配置name        name: &#39;tofriend&#39;,        params: &#123;          name: &#39;李四&#39;        &#125;      &#125;)&#125;</code></pre><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><pre class="language-none"><code class="language-none">const routes &#x3D; [  &#123;    path: &#39;&#x2F;&#39;,    redirect: &#39;要重定向的路由&#39;  &#125; ]</code></pre><h3 id="添加-404-not-found"><a href="#添加-404-not-found" class="headerlink" title="添加 404 not found"></a>添加 404 not found</h3><pre class="language-none"><code class="language-none">const routes &#x3D; [  &#123;    path: &#39;*&#39;,    component: notfound  &#125; ]</code></pre><h2 id="路由传值"><a href="#路由传值" class="headerlink" title="路由传值"></a>路由传值</h2></li></ul><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><blockquote><p>配合path，刷新不会丢失参数</p></blockquote><h4 id="导航传值"><a href="#导航传值" class="headerlink" title="导航传值"></a>导航传值</h4><ul><li><p>通过在路由后面直接跟上问号键值对的方式</p><p>App.vue</p><pre class="language-none"><code class="language-none">&lt;router-link to&#x3D;&quot;&#x2F;myMusic?name&#x3D;张三&quot;&gt;我的音乐&lt;&#x2F;router-link&gt;</code></pre></li><li><p>通过 this.$route.query.name 取值，插值无需跟上this</p><p>myMusic.vue</p><pre class="language-none"><code class="language-none">&lt;script&gt;export default &#123;  created() &#123;    console.log(this.$route.query.name)  &#125;&#125;&lt;&#x2F;script&gt;</code></pre></li></ul><h4 id="代码传值"><a href="#代码传值" class="headerlink" title="代码传值"></a>代码传值</h4><ul><li>传递</li></ul><pre class="language-none"><code class="language-none">this.$router.push(&#123; path: &#39;&#x2F;news&#39;, query: &#123; userId: 123 &#125;&#125;);</code></pre><ul><li>接收</li></ul><pre class="language-none"><code class="language-none">this.$route.query.userId</code></pre><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><blockquote><p>配合name，刷新会丢失参数</p></blockquote><h4 id="导航传值-1"><a href="#导航传值-1" class="headerlink" title="导航传值"></a>导航传值</h4><ul><li><p>通过在路由配置路径 / 方式传值</p><p>App.vue</p><pre class="language-none"><code class="language-none">&lt;router-link to&#x3D;&quot;&#x2F;friend&#x2F;李四&quot;&gt;朋友&lt;&#x2F;router-link&gt;</code></pre><p>路由文件 index.js</p><pre class="language-none"><code class="language-none">const routes &#x3D; [&#123;    &#x2F;&#x2F; 参数必须    &#x2F;&#x2F; path: &#39;&#x2F;friend&#x2F;:name&#39;,    &#x2F;&#x2F; 加了问号表示参数可有可无    path: &#39;&#x2F;friend&#x2F;:name?&#39;,    component: friend,  &#125;]</code></pre><p>firend.vue</p></li><li><p>通过 this.$route.params.name 取值，插值无需跟上this</p>  <pre class="language-none"><code class="language-none">&lt;script&gt;export default &#123;  created() &#123;    console.log(this.$route.params.name)  &#125;&#125;&lt;&#x2F;script&gt;</code></pre></li></ul><h4 id="代码传值-1"><a href="#代码传值-1" class="headerlink" title="代码传值"></a>代码传值</h4><ul><li>传递</li></ul><pre class="language-none"><code class="language-none">this.$router.push(&#123; name: &#39;news&#39;, params: &#123; userId: 123 &#125;&#125;)</code></pre><ul><li>接收</li></ul><pre class="language-none"><code class="language-none">this.$route.params.userId</code></pre><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><h3 id="添加全局守卫"><a href="#添加全局守卫" class="headerlink" title="添加全局守卫"></a>添加全局守卫</h3><p>main.js</p><pre class="language-none"><code class="language-none">let isLogin &#x3D; false;&#x2F;&#x2F; 全局守卫 路由跳转前判断router.beforeEach((to, from, next) &#x3D;&gt; &#123;  console.log(to, from, next);  if (to.path &#x3D;&#x3D; &#39;&#x2F;myMusic&#39; &amp;&amp; isLogin &#x3D;&#x3D; false) &#123;    alert(&#39;请登录&#39;);    next(false);  &#125; else &#123;    next()  &#125;&#125;)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;npm install vue-router&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="vue" scheme="https://ajax404.tk/categories/vue/"/>
    
    
    <category term="vue" scheme="https://ajax404.tk/tags/vue/"/>
    
    <category term="路由" scheme="https://ajax404.tk/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>vue获取真实dom元素和组件</title>
    <link href="https://ajax404.tk/2021/09/07/vue%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9Edom%E5%85%83%E7%B4%A0/"/>
    <id>https://ajax404.tk/2021/09/07/vue%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9Edom%E5%85%83%E7%B4%A0/</id>
    <published>2021-09-07T03:17:49.910Z</published>
    <updated>2021-09-07T11:39:26.278Z</updated>
    
    <content type="html"><![CDATA[<h3 id="dom元素-组件获取"><a href="#dom元素-组件获取" class="headerlink" title="dom元素/组件获取"></a>dom元素/组件获取</h3><ul><li><p>在dom元素或组件添加ref属性</p><blockquote><p> ref = “自定义名”</p></blockquote><pre class="language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;son ref&#x3D;&quot;cpn&quot;&gt;&lt;&#x2F;son&gt;    &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;ipt&quot;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;</code></pre></li><li><p>通过this.$refs获取所有带有ref的元素</p><pre class="language-none"><code class="language-none">&lt;script&gt;import son from &#39;@&#x2F;components&#x2F;son.vue&#39;export default &#123;  components: &#123;    son  &#125;,  mounted() &#123;  &#x2F;&#x2F; this.$refs 是一个对象    console.log(this.$refs); &#x2F;&#x2F; &#123;cpn: VueComponent, ipt: input&#125;  &#125;&#125;&lt;&#x2F;script&gt;</code></pre></li><li><p>$root可以获取根组件，$parent可以获取父组件</p><pre class="language-none"><code class="language-none">visitParent() &#123;console.log(this.$parent.message)console.log(this.$root.message)&#125;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;dom元素-组件获取&quot;&gt;&lt;a href=&quot;#dom元素-组件获取&quot; class=&quot;headerlink&quot; title=&quot;dom元素/组件获取&quot;&gt;&lt;/a&gt;dom元素/组件获取&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在dom元素或组件添加ref属性&lt;/p&gt;
&lt;blockqu</summary>
      
    
    
    
    <category term="vue" scheme="https://ajax404.tk/categories/vue/"/>
    
    
    <category term="vue" scheme="https://ajax404.tk/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>v-model基本使用</title>
    <link href="https://ajax404.tk/2021/09/07/v-model/"/>
    <id>https://ajax404.tk/2021/09/07/v-model/</id>
    <published>2021-09-07T02:36:16.046Z</published>
    <updated>2021-09-07T03:00:19.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h3><p>距离上次发布文章已经过去挺久的了，这几天因为各种事情状态不是很好，反正挺糟心的，可能是阅历不够，少见多怪吧。写文章的习惯我会努力保持，以后工作也一样。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将表单元素的value属性和vue数据变量双向绑定在一起</p><ul><li><p>双向绑定</p><p><strong>view</strong> &hArr; <strong>model</strong></p></li></ul><h3 id="双向绑定表单元素"><a href="#双向绑定表单元素" class="headerlink" title="双向绑定表单元素"></a>双向绑定表单元素</h3><h4 id="text"><a href="#text" class="headerlink" title="text"></a>text</h4><pre class="language-none"><code class="language-none">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;双向绑定的数据&quot;&gt;</code></pre><h4 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h4><p>数据：gender: ‘男’</p><pre class="language-none"><code class="language-none">&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;gender&quot; value&#x3D;&quot;男&quot;&gt;男&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;gender&quot; value&#x3D;&quot;女&quot;&gt;女</code></pre><h4 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h4><p>数据：hobbies: [ ]</p><pre class="language-none"><code class="language-none">&lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;跑步&quot; v-model&#x3D;&quot;hobbies&quot;&gt;跑步&lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;羽毛球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;羽毛球&lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;乒乓球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;乒乓球</code></pre><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>数据：city: ‘ ‘</p><pre class="language-none"><code class="language-none">&lt;select v-model&#x3D;&quot;city&quot;&gt;      &lt;option value&#x3D;&quot;北京&quot;&gt;北京&lt;&#x2F;option&gt;      &lt;option value&#x3D;&quot;上海&quot;&gt;上海&lt;&#x2F;option&gt;      &lt;option value&#x3D;&quot;广州&quot;&gt;广州&lt;&#x2F;option&gt;      &lt;option value&#x3D;&quot;深圳&quot;&gt;深圳&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;</code></pre><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><ul><li>.number：以parseFloat的形式转换为数字型</li><li>.trim：清除字符串首尾两侧的空格</li><li>.lazy：在change时才触发，即失焦的时候触发</li></ul><h3 id="实现父子组件数据的双向绑定"><a href="#实现父子组件数据的双向绑定" class="headerlink" title="实现父子组件数据的双向绑定"></a>实现父子组件数据的双向绑定</h3><ul><li><p>父组件无须通过自定义属性向子组件传递数据，直接通过v-model 传递和接收数据</p></li><li><p>父组件无须添加来自子组件的自定义事件</p></li><li><p>子组件发送的自定义事件必须为input</p><p>父组件 App.vue</p><pre class="language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;!-- 直接绑定数据即可 --&gt;    &lt;son v-model&#x3D;&quot;username&quot;&gt;&lt;&#x2F;son&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import son from &#39;@&#x2F;components&#x2F;son.vue&#39;export default &#123;  data() &#123;    return &#123;      username: &#39;哈哈&#39;    &#125;  &#125;,  components: &#123;    son  &#125;&#125;&lt;&#x2F;script&gt;&lt;style&gt;&lt;&#x2F;style&gt;</code></pre><p>子组件 son.vue</p><pre class="language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;  &lt;!-- 将父组件的传递的数据绑定到value --&gt;    &lt;input type&#x3D;&quot;text&quot; :value&#x3D;&quot;value&quot; @blur&#x3D;&quot;blurFn&quot;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  props: &#123;    value: &#123;      type: String    &#125;  &#125;,  methods: &#123;    blurFn(event) &#123;      &#x2F;&#x2F; 自定义事件名必须为input      this.$emit(&#39;input&#39;, event.target.value)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style&gt;&lt;&#x2F;style&gt;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h3&gt;&lt;p&gt;距离上次发布文章已经过去挺久的了，这几天因为各种事情状态不是很好，反正挺糟心的，可能是阅历不够，少见多怪吧。写文章的习惯我会努力保持，以后工</summary>
      
    
    
    
    <category term="vue" scheme="https://ajax404.tk/categories/vue/"/>
    
    
    <category term="vue" scheme="https://ajax404.tk/tags/vue/"/>
    
    <category term="指令" scheme="https://ajax404.tk/tags/%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>数组API</title>
    <link href="https://ajax404.tk/2021/08/19/%E6%95%B0%E7%BB%84API/"/>
    <id>https://ajax404.tk/2021/08/19/%E6%95%B0%E7%BB%84API/</id>
    <published>2021-08-19T14:55:30.519Z</published>
    <updated>2021-09-02T14:35:15.105Z</updated>
    
    <content type="html"><![CDATA[<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p><img src="https://cdn.jsdelivr.net/gh/soxio/imglib@master/hexo/forEach.png" loading="lazy"></p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><img src="https://cdn.jsdelivr.net/gh/soxio/imglib@master/hexo/map.png" loading="lazy"></p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p><img src="https://cdn.jsdelivr.net/gh/soxio/imglib@master/hexo/filter.png" loading="lazy"></p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><ul><li>推荐在回调函数后面跟上数据的初始值， 避免出错</li><li>reduce 函数只 return 一次</li></ul><p><img src="https://cdn.jsdelivr.net/gh/soxio/imglib@master/hexo/reduce.png" loading="lazy"></p><h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><p><img src="https://cdn.jsdelivr.net/gh/soxio/imglib@master/hexo/every.png" loading="lazy"></p><h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><p><img src="https://cdn.jsdelivr.net/gh/soxio/imglib@master/hexo/some.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;forEach&quot;&gt;&lt;a href=&quot;#forEach&quot; class=&quot;headerlink&quot; title=&quot;forEach&quot;&gt;&lt;/a&gt;forEach&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/soxio/imglib</summary>
      
    
    
    
    <category term="数组" scheme="https://ajax404.tk/categories/%E6%95%B0%E7%BB%84/"/>
    
    
    <category term="API" scheme="https://ajax404.tk/tags/API/"/>
    
    <category term="数组" scheme="https://ajax404.tk/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>express操作数据库</title>
    <link href="https://ajax404.tk/2021/08/17/express%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://ajax404.tk/2021/08/17/express%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-08-17T05:26:54.123Z</published>
    <updated>2021-08-17T06:20:13.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入mysql 第三方模块</span><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建数据库连接关系</span><span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 配置连接信息</span>  host<span class="token operator">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>  user<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  password<span class="token operator">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>  database<span class="token operator">:</span> <span class="token string">'bignews'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 查询数据</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from users'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 打印数据</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="方式一（推荐）"><a href="#方式一（推荐）" class="headerlink" title="方式一（推荐）"></a>方式一（推荐）</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义sql语句 ?表示占位符</span><span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token string">'insert into users set ?'</span><span class="token punctuation">;</span><span class="token comment">// 插入数据的属性名需要和数据库的字段名一致</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  username<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>  nickname<span class="token operator">:</span> <span class="token string">'小张'</span><span class="token punctuation">&#125;</span><span class="token comment">// 执行语句</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据插入成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义sql语句 ?表示占位符</span><span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token string">'insert into users (username, nickname) values (?, ?)'</span><span class="token punctuation">;</span><span class="token comment">// 定义要插入的数据</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  username<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>  nickname<span class="token operator">:</span> <span class="token string">'小张'</span><span class="token punctuation">&#125;</span><span class="token comment">// 执行语句</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">[</span>obj<span class="token punctuation">.</span>username<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>nickname<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据插入成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><h4 id="方式一（推荐）-1"><a href="#方式一（推荐）-1" class="headerlink" title="方式一（推荐）"></a>方式一（推荐）</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token string">'update users set ? where id = ?'</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">[</span>obj<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据修改成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token string">'update users set username = ?, nickname = ? where id = ?'</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">[</span>obj<span class="token punctuation">.</span>username<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>nickname<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据修改成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token string">'delete from users where id = ?'</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据删除成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;创建连接&quot;&gt;&lt;a href=&quot;#创建连接&quot; class=&quot;headerlink&quot; title=&quot;创建连接&quot;&gt;&lt;/a&gt;创建连接&lt;/h3&gt;&lt;pre class=&quot;language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code</summary>
      
    
    
    
    <category term="express" scheme="https://ajax404.tk/categories/express/"/>
    
    
    <category term="MySQL" scheme="https://ajax404.tk/tags/MySQL/"/>
    
    <category term="express" scheme="https://ajax404.tk/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>express基本使用</title>
    <link href="https://ajax404.tk/2021/08/16/express%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://ajax404.tk/2021/08/16/express%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-08-16T13:51:23.501Z</published>
    <updated>2022-03-04T07:26:35.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="express创建服务器"><a href="#express创建服务器" class="headerlink" title="express创建服务器"></a>express创建服务器</h3><pre class="language-none"><code class="language-none">const express &#x3D; require(&#39;express&#39;);const app&#x3D; express();app.get(&#39;&#x2F;&#39;, (req, res)&#x3D;&gt;&#123;    req.send(&#39;Hello world&#39;);&#125;);app.listen(8083, ()&#x3D;&gt;&#123;    console.log(&#39;Server is running at http:&#x2F;&#x2F;localhost:8083&#39;)&#125;)</code></pre><h3 id="获取GET请求参数"><a href="#获取GET请求参数" class="headerlink" title="获取GET请求参数"></a>获取GET请求参数</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 打印请求参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="获取POST请求参数"><a href="#获取POST请求参数" class="headerlink" title="获取POST请求参数"></a>获取POST请求参数</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 加载解析urlencoded请求体的中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>extended<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 打印post请求参数</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;express创建服务器&quot;&gt;&lt;a href=&quot;#express创建服务器&quot; class=&quot;headerlink&quot; title=&quot;express创建服务器&quot;&gt;&lt;/a&gt;express创建服务器&lt;/h3&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code </summary>
      
    
    
    
    <category term="express" scheme="https://ajax404.tk/categories/express/"/>
    
    
    <category term="express" scheme="https://ajax404.tk/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>Node获取GET和POST请求参数</title>
    <link href="https://ajax404.tk/2021/08/16/Node%E8%8E%B7%E5%8F%96GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"/>
    <id>https://ajax404.tk/2021/08/16/Node%E8%8E%B7%E5%8F%96GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/</id>
    <published>2021-08-16T13:21:31.877Z</published>
    <updated>2021-08-19T14:52:22.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="获取GET请求参数"><a href="#获取GET请求参数" class="headerlink" title="获取GET请求参数"></a>获取GET请求参数</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>querystring<span class="token punctuation">]</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>querystring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. 引入内置模块</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 2. 获取参数对象</span>      <span class="token keyword">let</span> query <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 张三</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 23</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="获取POST请求参数"><a href="#获取POST请求参数" class="headerlink" title="获取POST请求参数"></a>获取POST请求参数</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入模块</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// post请求参数是通过事件获取的</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> postParams <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment">// 请求参数传递的时候触发data事件</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token parameter">params</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        postParams <span class="token operator">+=</span> params<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 请求参数传递完成的时候触发data事件</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 打印请求完成的参数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>postParams<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;获取GET请求参数&quot;&gt;&lt;a href=&quot;#获取GET请求参数&quot; class=&quot;headerlink&quot; title=&quot;获取GET请求参数&quot;&gt;&lt;/a&gt;获取GET请求参数&lt;/h3&gt;&lt;h4 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Node" scheme="https://ajax404.tk/categories/Node/"/>
    
    
    <category term="Node" scheme="https://ajax404.tk/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>使用SSH连接Github</title>
    <link href="https://ajax404.tk/2021/08/14/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5Github/"/>
    <id>https://ajax404.tk/2021/08/14/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5Github/</id>
    <published>2021-08-14T14:24:17.677Z</published>
    <updated>2021-08-14T15:25:53.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本地生成密钥SSH-key"><a href="#本地生成密钥SSH-key" class="headerlink" title="本地生成密钥SSH key"></a>本地生成密钥SSH key</h3><blockquote><p>ssh-keygen -t rsa -C “用户邮箱”</p></blockquote><h3 id="查看生成的密钥"><a href="#查看生成的密钥" class="headerlink" title="查看生成的密钥"></a>查看生成的密钥</h3><blockquote><p>cat ~/.ssh/id_rsa.pub</p></blockquote><h3 id="Github设置密钥"><a href="#Github设置密钥" class="headerlink" title="Github设置密钥"></a>Github设置密钥</h3><blockquote><p>复制上面查看的key，打开<a href="https://github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p></blockquote><h3 id="验证是否连接成功"><a href="#验证是否连接成功" class="headerlink" title="验证是否连接成功"></a>验证是否连接成功</h3><blockquote><p>ssh -T <a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;">&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;本地生成密钥SSH-key&quot;&gt;&lt;a href=&quot;#本地生成密钥SSH-key&quot; class=&quot;headerlink&quot; title=&quot;本地生成密钥SSH key&quot;&gt;&lt;/a&gt;本地生成密钥SSH key&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;ssh-keygen -t</summary>
      
    
    
    
    <category term="Github" scheme="https://ajax404.tk/categories/Github/"/>
    
    
    <category term="git" scheme="https://ajax404.tk/tags/git/"/>
    
    <category term="github" scheme="https://ajax404.tk/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="https://ajax404.tk/2021/08/09/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://ajax404.tk/2021/08/09/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-08-09T02:32:40.549Z</published>
    <updated>2021-09-02T14:53:13.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><h4 id="设置用户名"><a href="#设置用户名" class="headerlink" title="设置用户名"></a>设置用户名</h4><blockquote><p>git config –global user.name “你的github用户名” </p><p>git config –global user.email “你的github邮箱”</p></blockquote><h4 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h4><blockquote><p>git init</p></blockquote><h4 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h4><blockquote><p>git add .  添加全部 或者 git add <filename></p></blockquote><h4 id="提交文件到本地仓库"><a href="#提交文件到本地仓库" class="headerlink" title="提交文件到本地仓库"></a>提交文件到本地仓库</h4><blockquote><p>git commit -m ‘项目描述信息’</p></blockquote><h4 id="log记录命令"><a href="#log记录命令" class="headerlink" title="log记录命令"></a>log记录命令</h4><blockquote><p>git log  查看本地仓库版本记录</p><p>git log –oneline  简化显示</p><p>git reflog  查看回退版本步数</p></blockquote><h4 id="版本前进后退"><a href="#版本前进后退" class="headerlink" title="版本前进后退"></a>版本前进后退</h4><blockquote><p>git reset –hard 索引值 【推荐】</p><p>git reset –hard ^ 后退一步</p><p>git reset –hard ~5 后退五步</p></blockquote><h4 id="版本差异对比"><a href="#版本差异对比" class="headerlink" title="版本差异对比"></a>版本差异对比</h4><blockquote><p>git diff [历史版本][文件名]    将工作区的文件和历史版本比较，不带文件名则比较多个文件</p></blockquote><hr><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><ul><li>创建分支  git branch [分支名]</li><li>查看分支  git branch -v</li><li>切换分支  git checkout [分支名]</li><li>合并分支<ul><li>第一步 切换到主分支    checkout [主分支]</li><li>第二步  执行 git merge [有新内容的分支名]</li></ul></li><li>合并冲突<ul><li>第一步 编辑文件，删除特殊符号</li><li>第二步 修改文件到理想状态</li><li>第三步 git add [文件名]</li><li>第四步 git commit -m ‘日志信息’  不能带文件名</li></ul></li></ul><hr><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h4 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h4><ul><li><p>生成ssh密钥</p><blockquote><p>ssh-keygen -t rsa -C “邮箱地址”</p></blockquote></li><li><p>一路回车</p></li><li><p>配置:github - <strong>settings</strong> - 左侧 <strong>SSH and GPG keys</strong> - New SSH key - 复制上面生成的 <strong>id_rsa.pub</strong> 文件 里面 key 生成 ssh密钥</p></li></ul><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><blockquote><p>git remote add origin(别名) https: // git.coding.net/用户名/项目名.git</p></blockquote><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><blockquote><p>git push origin(远程库别名) master</p></blockquote><h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><blockquote><p>git clone 远程仓库地址</p></blockquote><h4 id="查看或删除远程仓库地址"><a href="#查看或删除远程仓库地址" class="headerlink" title="查看或删除远程仓库地址"></a>查看或删除远程仓库地址</h4><blockquote><p> git remote -v</p><p>git remote rm origin</p></blockquote><h4 id="合并远程仓库的文件"><a href="#合并远程仓库的文件" class="headerlink" title="合并远程仓库的文件"></a>合并远程仓库的文件</h4><ul><li>方式一 git pull –rebase origin master</li><li> 方式二  </li><li>git fetch origin master   【此时只是下载，不合并工作区文件，可以使用 git checkout origin/master 切换查看下载的文件】</li><li>git merge origin/master</li></ul><h4 id="跨团队合作"><a href="#跨团队合作" class="headerlink" title="跨团队合作"></a>跨团队合作</h4><blockquote><p>fork原项目 - 增加功能 - 新建 pull requests  - 原项目主人同意合并</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本地仓库&quot;&gt;&lt;a href=&quot;#本地仓库&quot; class=&quot;headerlink&quot; title=&quot;本地仓库&quot;&gt;&lt;/a&gt;本地仓库&lt;/h2&gt;&lt;h4 id=&quot;设置用户名&quot;&gt;&lt;a href=&quot;#设置用户名&quot; class=&quot;headerlink&quot; title=&quot;设置用户名&quot;&gt;</summary>
      
    
    
    
    <category term="Git" scheme="https://ajax404.tk/categories/Git/"/>
    
    
    <category term="Git" scheme="https://ajax404.tk/tags/Git/"/>
    
    <category term="命令" scheme="https://ajax404.tk/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令</title>
    <link href="https://ajax404.tk/2021/08/06/title%20hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://ajax404.tk/2021/08/06/title%20hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-08-06T15:55:11.684Z</published>
    <updated>2021-08-06T15:55:11.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="clean"><a href="#clean" class="headerlink" title="clean"></a><font face="微软雅黑">clean</font></h1><pre class="language-none"><code class="language-none">$ hexo clean</code></pre><p><font face="微软雅黑" size="4">清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</font></p><h1 id="generate"><a href="#generate" class="headerlink" title="generate"></a><font face="微软雅黑">generate</font></h1><pre class="language-none"><code class="language-none">$ hexo generate</code></pre><p><font face="微软雅黑" size="4">生成站点静态文件。</font></p><p><font face="微软雅黑" size="4">该命令可以简写为：</font></p><pre class="language-none"><code class="language-none">$ hexo g</code></pre><h1 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a><font face="微软雅黑">deploy</font></h1><pre class="language-none"><code class="language-none">$ hexo deploy</code></pre><p><font face="微软雅黑" size="4">部署网站。</font></p><p><font face="微软雅黑" size="4">该命令可以简写为：</font></p><pre class="language-none"><code class="language-none">$ hexo d</code></pre><h1 id="一键生成和部署"><a href="#一键生成和部署" class="headerlink" title="一键生成和部署"></a><font face="微软雅黑">一键生成和部署</font></h1><pre class="language-none"><code class="language-none">$ hexo clean &amp;&amp; hexo g -d</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;clean&quot;&gt;&lt;a href=&quot;#clean&quot; class=&quot;headerlink&quot; title=&quot;clean&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;clean&lt;/font&gt;&lt;/h1&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code cla</summary>
      
    
    
    
    <category term="hexo" scheme="https://ajax404.tk/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL数据操作语句</title>
    <link href="https://ajax404.tk/2021/08/06/MySQL%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E8%AF%AD%E5%8F%A5/"/>
    <id>https://ajax404.tk/2021/08/06/MySQL%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-08-06T11:47:19.901Z</published>
    <updated>2021-08-17T06:25:00.001Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><blockquote><p>查询全部    select * from 表名</p><p>查询语法    select [字段，字段] from 表名</p></blockquote><h3 id="增加操作"><a href="#增加操作" class="headerlink" title="增加操作"></a>增加操作</h3><blockquote><p>增加语法    insert into 表名(字段, 字段) values (值1, 值2)</p><p>示例    insert into users(username, nickname) values (‘用户名’, ‘昵称’)</p></blockquote><h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><blockquote><p>更新语法    update users set 字段=值, 字段=值  where 字段=值</p><p>示例    update users set nickname=’大大’,email= ‘<a href="mailto:&#x31;&#x32;&#51;&#48;&#x36;&#x40;&#113;&#113;&#46;&#99;&#x6f;&#x6d;">&#x31;&#x32;&#51;&#48;&#x36;&#x40;&#113;&#113;&#46;&#99;&#x6f;&#x6d;</a>‘ where id = 2</p></blockquote><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><blockquote><p>删除语法 delete from 表名 where 字段 = 值</p><p>示例    delete from users where id = 2</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;查询操作&quot;&gt;&lt;a href=&quot;#查询操作&quot; class=&quot;headerlink&quot; title=&quot;查询操作&quot;&gt;&lt;/a&gt;查询操作&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;查询全部    select * from 表名&lt;/p&gt;
&lt;p&gt;查询语法    select [字</summary>
      
    
    
    
    <category term="MySQL" scheme="https://ajax404.tk/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://ajax404.tk/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://ajax404.tk/tags/SQL/"/>
    
  </entry>
  
</feed>
